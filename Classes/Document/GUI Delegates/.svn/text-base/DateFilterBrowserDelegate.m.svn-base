//
//  DateFilterBrowserDelegate.m
//  Ges
//
//  Created by NeoJF on 03/10/05.
//  Copyright 2005 __MyCompanyName__. All rights reserved.
//

/*
 * Passive delegate for the browser allowing to select which period of time
 * must be filtered.
 */

#import "DateFilterBrowserDelegate.h"


@implementation DateFilterBrowserDelegate


#pragma mark -
#pragma mark === Object's life ===

- (void)awakeFromNib {
	[browser selectRow:0 inColumn:0];
}

- (void)dealloc {
	[maxDate release];
	[minDate release];
	[super dealloc];
}


#pragma mark -
#pragma mark === NSBrowser's methods ===

- (int)browser:(NSBrowser *)sender numberOfRowsInColumn:(int)column {
	// Fetches the max and min operation dates in the currently displayed operations.
	maxDate = [[[operationsArrayController valueForKeyPath:@"content.@max.operationDate"] dateWithCalendarFormat:nil timeZone:nil] retain];
	minDate = [[[operationsArrayController valueForKeyPath:@"content.@min.operationDate"] dateWithCalendarFormat:nil timeZone:nil] retain];
	
	int numberOfRowsInColumn;
	
	if (column == 0) {
		// First column
		numberOfRowsInColumn = 7;
	}
	else if (column == 1) {
		// Second column
		int selectedRowInColumn0 = [sender selectedRowInColumn:0];
		int numberOfYears = [maxDate yearOfCommonEra] - [minDate yearOfCommonEra] + 1;
		
		if (selectedRowInColumn0 == 1) {
			// Relative
			numberOfRowsInColumn = 5;
		}
		else if (selectedRowInColumn0 == 2 ||
				 selectedRowInColumn0 == 3 ||
				 selectedRowInColumn0 == 4 ||
				 selectedRowInColumn0 == 5) {
			// Month, or trimester, or semester, or year
			numberOfRowsInColumn = numberOfYears;
		}
	}
	else if (column == 2) {
		// Third column
		int selectedRowInColumn0 = [sender selectedRowInColumn:0];
		
		if (selectedRowInColumn0 == 1) {
			// Relative
			numberOfRowsInColumn = 2;
		}
		
		else {
			int selectedRowInColumn1 = [sender selectedRowInColumn:1];
			
			if (selectedRowInColumn0 == 2) {
				// Month
				numberOfRowsInColumn = 12;
			}
			
			else if (selectedRowInColumn0 == 3) {
				// Trimester
				numberOfRowsInColumn = 4;
			}
			
			else if (selectedRowInColumn0 == 4) {
				// Semester
				numberOfRowsInColumn = 2;
			}
		}
	}
	return numberOfRowsInColumn;
}

- (void)browser:(NSBrowser *)sender willDisplayCell:(id)cell atRow:(int)row column:(int)column {
	if (column == 0) {
		// First column
		if (row == 0) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodNoneCellTitle", nil)];
			[cell setLeaf:YES];
		}
		else if (row == 1) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodRelativeCellTitle", nil)];
			[cell setLeaf:NO];
		}
		else if (row == 2) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodMonthCellTitle", nil)];
			[cell setLeaf:NO];
		}
		else if (row == 3) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodTrimesterCellTitle", nil)];
			[cell setLeaf:NO];
		}
		else if (row == 4) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodSemesterCellTitle", nil)];
			[cell setLeaf:NO];
		}
		else if (row == 5) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodYearCellTitle", nil)];
			[cell setLeaf:NO];
		}
		else if (row == 6) {
			[cell setStringValue:NSLocalizedString(@"dateFilterBrowserPeriodDayToDayCellTitle", nil)];
			[cell setLeaf:YES];
		}
	}
	
	else if (column == 1) {
		// Second column
		int selectedRowInColumn0 = [sender selectedRowInColumn:0];
		
		if (selectedRowInColumn0 == 1) {
			// Relative
			if (row == 0) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeWeekCellTitle", nil)];
			}
			else if (row == 1) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeMonthCellTitle", nil)];
			}
			else if (row == 2) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeTrimesterCellTitle", nil)];
			}
			else if (row == 3) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeSemesterCellTitle", nil)];
			}
			else if (row == 4) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeYearCellTitle", nil)];
			}
			[cell setLeaf:NO];
		}
		
		else if (selectedRowInColumn0 == 2 ||
				 selectedRowInColumn0 == 3 ||
				 selectedRowInColumn0 == 4) {
			// Month, or trimester, or semester
			[cell setIntValue:[maxDate yearOfCommonEra] - row];
			[cell setLeaf:NO];
		}
		
		else if (selectedRowInColumn0 == 5) {
			// Year
			[cell setIntValue:[maxDate yearOfCommonEra] - row];
			[cell setLeaf:YES];
		}
	}
	
	else if (column == 2) {
		// Third column
		int selectedRowInColumn0 = [sender selectedRowInColumn:0];
		int selectedRowInColumn1 = [sender selectedRowInColumn:1];

		if (selectedRowInColumn0 == 1) {
			// Relative
			if (row == 0) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeCurrentCellTitle", nil)];
			}
			else if (row == 1) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserRelativeLastCellTitle", nil)];
			}
			[cell setLeaf:YES];
		}
		
		else if (selectedRowInColumn0 == 2) {
			// Month
			switch (row) {
				case 0 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthJanuaryCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 1 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthFebruaryCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 2 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthMarchCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 3 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthAprilCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 4 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthMaiCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 5 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthJuniCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 6 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthJuliCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 7 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthAugustCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 8 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthSeptemberCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 9 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthOctoberCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 10 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthNovemberCellTitle", nil)];
					[cell setLeaf:YES];
					break;
				case 11 :
					[cell setStringValue:NSLocalizedString(@"dateFilterBrowserMonthDecemberCellTitle", nil)];
					[cell setLeaf:YES];
					break;
			}
		}
		
		else if (selectedRowInColumn0 == 3) {
			// Trimester
			if (row == 0) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserFirstTrimesterCellTitle", nil)];
				[cell setLeaf:YES];
			}
			else if (row == 1) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserSecondTrimesterCellTitle", nil)];
				[cell setLeaf:YES];
			}
			else if (row == 2) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserThirdTrimesterCellTitle", nil)];
				[cell setLeaf:YES];
			}
			else if (row == 3) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserFourthTrimesterCellTitle", nil)];
				[cell setLeaf:YES];
			}
		}
		
		else if (selectedRowInColumn0 == 4) {
			// Semester
			if (row == 0) {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserFirstSemesterCellTitle", nil)];
			}
			else {
				[cell setStringValue:NSLocalizedString(@"dateFilterBrowserSecondSemesterCellTitle", nil)];
			}
			[cell setLeaf:YES];
		}
	}
}


#pragma mark -
#pragma mark === Actions ===

- (IBAction)browserAction:(id)sender {
	int selectedRowInColumn0 = [sender selectedRowInColumn:0];
	NSCalendarDate* today = [NSCalendarDate date];
	today = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:[today monthOfYear] day:[today dayOfMonth] hour:12 minute:0 second:0 timeZone:nil];
	
	if ([[sender selectedCell] isLeaf]) {
		
		if (selectedRowInColumn0 == P_NONE) {
			// Period filter disabled.
			[filterController setPeriodFilterEnabled:NO];
		}
		else {
			// Period filter enabled.
			[filterController setPeriodFilterEnabled:YES];
			if (selectedRowInColumn0 == P_DAYTODAY) {
				[periodFilterTabView selectTabViewItemAtIndex:1];
			}
			else {
				// Leaf 1st column's items processed, we are at least in second column.
				int selectedRowInColumn1 = [sender selectedRowInColumn:1];

				if (selectedRowInColumn0 == P_RELATIVE) {
					// Relative period.
					int selectedRowInColumn2 = [sender selectedRowInColumn:2];

					if (selectedRowInColumn1 == R_WEEK) {
						// Relative week.
						if (selectedRowInColumn2 == RC_CURRENT) {
							// Current week.
							[filterController setEndDate:[today dateByAddingYears:0 months:0 days:0 hours:11 minutes:59 seconds:59]];
							[filterController setStartDate:[today dateByAddingYears:0 months:0 days:-((6 + [today dayOfWeek]) % 7) hours:-12 minutes:0 seconds:0]];
						}
						else if (selectedRowInColumn2 == RC_LAST) {
							// Last week.
							NSCalendarDate* endDate = [today dateByAddingYears:0 months:0 days:((-(6 + [today dayOfWeek]) % 7) - 1) hours:11 minutes:59 seconds:59];
							[filterController setEndDate:endDate];
							[filterController setStartDate:[endDate dateByAddingYears:0 months:0 days:-6 hours:-23 minutes:-59 seconds:-59]];
						}
					}
					
					else if (selectedRowInColumn1 == R_MONTH) {
						// Relative month.
						if (selectedRowInColumn2 == RC_CURRENT) {
							// Current month.
							NSCalendarDate* startDate = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:[today monthOfYear] day:1 hour:0 minute:0 second:0 timeZone:nil];
							[filterController setStartDate:startDate];
							[filterController setEndDate:[today dateByAddingYears:0 months:0 days:0 hours:11 minutes:59 seconds:59]];
						}
						else if (selectedRowInColumn2 == RC_LAST) {
							// Last month.
							NSCalendarDate* startDate = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:[today monthOfYear] - 1 day:1 hour:0 minute:0 second:0 timeZone:nil];
							[filterController setStartDate:startDate];
							NSCalendarDate* endDate = [[NSCalendarDate dateWithYear:[today yearOfCommonEra] month:[today monthOfYear] day:1 hour:0 minute:0 second:0 timeZone:nil] dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:-1];
							[filterController setEndDate:endDate];
						}
					}
					
					else if (selectedRowInColumn1 == R_TRIMESTER) {
						// Relative trimester.
						NSCalendarDate* firstDayOfCurrentTrimester = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:((([today monthOfYear] - 1) / 3) * 3 + 1) day:1 hour:0 minute:0 second:0 timeZone:nil];
						if (selectedRowInColumn2 == RC_CURRENT) {
							// Current trimester.
							[filterController setStartDate:firstDayOfCurrentTrimester];
							[filterController setEndDate:[today dateByAddingYears:0 months:0 days:0 hours:11 minutes:59 seconds:59]];
						}
						else if (selectedRowInColumn2 == RC_LAST) {
							// Last trimester.
							[filterController setStartDate:[firstDayOfCurrentTrimester dateByAddingYears:0 months:-3 days:0 hours:0 minutes:0 seconds:0]];
							[filterController setEndDate:[firstDayOfCurrentTrimester dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:-1]];
						}
					}
					
					else if (selectedRowInColumn1 == R_SEMESTER) {
						// Relative semester.
						NSCalendarDate* firstDayOfCurrentSemester = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:((([today monthOfYear] - 1) / 6) * 6 + 1) day:1 hour:0 minute:0 second:0 timeZone:nil];
						if (selectedRowInColumn2 == RC_CURRENT) {
							[filterController setStartDate:firstDayOfCurrentSemester];
							[filterController setEndDate:[today dateByAddingYears:0 months:0 days:0 hours:11 minutes:59 seconds:59]];
						}
						else if (selectedRowInColumn2 == RC_LAST) {
							// Last semester.
							[filterController setStartDate:[firstDayOfCurrentSemester dateByAddingYears:0 months:-6 days:0 hours:0 minutes:0 seconds:0]];
							[filterController setEndDate:[firstDayOfCurrentSemester dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:-1]];
						}
					}
					
					else if (selectedRowInColumn1 == R_YEAR) {
						// Relative year.
						NSCalendarDate* firstDayOfCurrentYear = [NSCalendarDate dateWithYear:[today yearOfCommonEra] month:1 day:1 hour:0 minute:0 second:0 timeZone:nil];
						if (selectedRowInColumn2 == RC_CURRENT) {
							// Current year.
							[filterController setStartDate:firstDayOfCurrentYear];
							[filterController setEndDate:[today dateByAddingYears:0 months:0 days:0 hours:11 minutes:59 seconds:59]];
						}
						else if (selectedRowInColumn2 == RC_LAST) {
							// Last year.
							[filterController setStartDate:[firstDayOfCurrentYear dateByAddingYears:-1 months:0 days:0 hours:0 minutes:0 seconds:0]];
							[filterController setEndDate:[firstDayOfCurrentYear dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:-1]];
						}
					}
				}
				
				else if (selectedRowInColumn0 == P_MONTH) {
					// The period is set by month. selectedRowInColumn1 contains the year's number.
					int selectedMonth = [[sender selectedCell] intValue];
					NSCalendarDate *startDate = [NSCalendarDate dateWithYear:([maxDate yearOfCommonEra] - selectedRowInColumn1) month:([sender selectedRowInColumn:2] + 1) day:1 hour:0 minute:0 second:0 timeZone:nil];
					[filterController setStartDate:startDate];
					[filterController setEndDate:[startDate dateByAddingYears:0 months:1 days:0 hours:0 minutes:0 seconds:0]];
				}
				
				else if (selectedRowInColumn0 == P_TRIMESTER) {
					// The period is set by trimester. selectedRowInColumn1 contains the year's number.
					int selectedTrimester = [sender selectedRowInColumn:2];
					NSCalendarDate *startDate = [NSCalendarDate dateWithYear:([maxDate yearOfCommonEra] - selectedRowInColumn1) month:(selectedTrimester * 3 + 1) day:1 hour:11 minute:59 second:0 timeZone:nil];
					[filterController setStartDate:startDate];
					[filterController setEndDate:[startDate dateByAddingYears:0 months:3 days:0 hours:0 minutes:2 seconds:0]];
				}
				
				else if (selectedRowInColumn0 == P_SEMESTER) {
					// The period is set by trimester. selectedRowInColumn1 contains the year's number.
					int selectedSemester = [sender selectedRowInColumn:2];
					NSCalendarDate *startDate = [NSCalendarDate dateWithYear:([maxDate yearOfCommonEra] - selectedRowInColumn1) month:(selectedSemester * 6 + 1) day:1 hour:11 minute:59 second:0 timeZone:nil];
					[filterController setStartDate:startDate];
					[filterController setEndDate:[startDate dateByAddingYears:0 months:6 days:0 hours:0 minutes:2 seconds:0]];
				}
				
				else if (selectedRowInColumn0 == P_YEAR) {
					// The period is set by year. The selected cell contains the year's number.
					int selectedYear = [[sender selectedCell] intValue];
					NSCalendarDate *startDate = [NSCalendarDate dateWithYear:selectedYear month:1 day:1 hour:11 minute:59 second:0 timeZone:nil];
					[filterController setStartDate:startDate];
					[filterController setEndDate:[startDate dateByAddingYears:1 months:0 days:-1 hours:0 minutes:2 seconds:0]];
				}
			}
		}
	}
}

- (IBAction)datePickerAction:(id)sender {
	[browser selectRow:6 inColumn:0];
}


#pragma mark -
#pragma mark === KVO ===

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
	if ([keyPath isEqualToString:@"periodFilterEnabled"]) {
		if ([[[periodFilterTabView selectedTabViewItem] identifier] isEqualToString:TAB_ID_DAYTODAY]) {
			if (![[change valueForKey:NSKeyValueChangeNewKey] boolValue]) {
				[browser selectRow:0 inColumn:0];
			}
			else {
				[browser selectRow:6 inColumn:0];
			}
		}
	}
}

@end